reinforcement learning (rl) is an interdisciplinary area of machine learning and optimal control concerned with how an intelligent agent ought to take actions in a dynamic environment in order to maximize the cumulative reward. reinforcement learning is one of three basic machine learning paradigms, alongside supervised learning and unsupervised learning.
reinforcement learning differs from supervised learning in not needing labelled input/output pairs to be presented, and in not needing sub-optimal actions to be explicitly corrected. instead the focus is on finding a balance between exploration (of uncharted territory) and exploitation (of current knowledge).
the environment is typically stated in the form of a markov decision process (mdp), because many reinforcement learning algorithms for this context use dynamic programming techniques. the main difference between the classical dynamic programming methods and reinforcement learning algorithms is that the latter do not assume knowledge of an exact mathematical model of the markov decision process and they target large markov decision processes where exact methods become infeasible.

introduction
due to its generality, reinforcement learning is studied in many disciplines, such as game theory, control theory, operations research, information theory, simulation-based optimization, multi-agent systems, swarm intelligence, and statistics. in the operations research and control literature, reinforcement learning is called approximate dynamic programming, or neuro-dynamic programming. the problems of interest in reinforcement learning have also been studied in the theory of optimal control, which is concerned mostly with the existence and characterization of optimal solutions, and algorithms for their exact computation, and less with learning or approximation, particularly in the absence of a mathematical model of the environment.
basic reinforcement learning is modeled as a markov decision process:

a set of environment and agent states, s;
a set of actions, a, of the agent;

  
    
      
        
          p
          
            a
          
        
        (
        s
        ,
        
          s
          ′
        
        )
        =
        pr
        (
        
          s
          
            t
            +
            1
          
        
        =
        
          s
          ′
        
        ∣
        
          s
          
            t
          
        
        =
        s
        ,
        
          a
          
            t
          
        
        =
        a
        )
      
    
    {\displaystyle p_{a}(s,s')=\pr(s_{t+1}=s'\mid s_{t}=s,a_{t}=a)}
  , the probability of transition (at time 
  
    
      
        t
      
    
    {\displaystyle t}
  ) from state 
  
    
      
        s
      
    
    {\displaystyle s}
   to state 
  
    
      
        
          s
          ′
        
      
    
    {\displaystyle s'}
   under action 
  
    
      
        a
      
    
    {\displaystyle a}
  .

  
    
      
        
          r
          
            a
          
        
        (
        s
        ,
        
          s
          ′
        
        )
      
    
    {\displaystyle r_{a}(s,s')}
  , the immediate reward after transition from 
  
    
      
        s
      
    
    {\displaystyle s}
   to 
  
    
      
        
          s
          ′
        
      
    
    {\displaystyle s'}
   with action 
  
    
      
        a
      
    
    {\displaystyle a}
  .the purpose of reinforcement learning is for the agent to learn an optimal, or nearly-optimal, policy that maximizes the "reward function" or other user-provided reinforcement signal that accumulates from the immediate rewards. this is similar to processes that appear to occur in animal psychology. for example, biological brains are hardwired to interpret signals such as pain and hunger as negative reinforcements, and interpret pleasure and food intake as positive reinforcements. in some circumstances, animals can learn to engage in behaviors that optimize these rewards. this suggests that animals are capable of reinforcement learning.a basic reinforcement learning agent ai interacts with its environment in discrete time steps. at each time t, the agent receives the current state 
  
    
      
        
          s
          
            t
          
        
      
    
    {\displaystyle s_{t}}
   and reward 
  
    
      
        
          r
          
            t
          
        
      
    
    {\displaystyle r_{t}}
  . it then chooses an action 
  
    
      
        
          a
          
            t
          
        
      
    
    {\displaystyle a_{t}}
   from the set of available actions, which is subsequently sent to the environment. the environment moves to a new state 
  
    
      
        
          s
          
            t
            +
            1
          
        
      
    
    {\displaystyle s_{t+1}}
   and the reward 
  
    
      
        
          r
          
            t
            +
            1
          
        
      
    
    {\displaystyle r_{t+1}}
   associated with the transition 
  
    
      
        (
        
          s
          
            t
          
        
        ,
        
          a
          
            t
          
        
        ,
        
          s
          
            t
            +
            1
          
        
        )
      
    
    {\displaystyle (s_{t},a_{t},s_{t+1})}
   is determined. the goal of a reinforcement learning agent is to learn a policy: 
  
    
      
        π
        :
        a
        ×
        s
        →
        [
        0
        ,
        1
        ]
      
    
    {\displaystyle \pi :a\times s\rightarrow [0,1]}
  , 
  
    
      
        π
        (
        a
        ,
        s
        )
        =
        pr
        (
        
          a
          
            t
          
        
        =
        a
        ∣
        
          s
          
            t
          
        
        =
        s
        )
      
    
    {\displaystyle \pi (a,s)=\pr(a_{t}=a\mid s_{t}=s)}
   that maximizes the expected cumulative reward.
formulating the problem as an markov decision process assumes the agent directly observes the current environmental state; in this case the problem is said to have full observability. if the agent only has access to a subset of states, or if the observed states are corrupted by noise, the agent is said to have partial observability, and formally the problem must be formulated as a partially observable markov decision process. in both cases, the set of actions available to the agent can be restricted. for example, the state of an account balance could be restricted to be positive; if the current value of the state is 3 and the state transition attempts to reduce the value by 4, the transition will not be allowed.
when the agent's performance is compared to that of an agent that acts optimally, the difference in performance gives rise to the notion of regret. in order to act near optimally, the agent must reason about the long-term consequences of its actions (i.e., maximize future income), although the immediate reward associated with this might be negative.
thus, reinforcement learning is particularly well-suited to problems that include a long-term versus short-term reward trade-off. it has been applied successfully to various problems, including energy storage operation, robot control, photovoltaic generators dispatch, backgammon, checkers, go (alphago), and autonomous driving systems .
two elements make reinforcement learning powerful: the use of samples to optimize performance and the use of function approximation to deal with large environments. thanks to these two key components, reinforcement learning can be used in large environments in the following situations:

a model of the environment is known, but an analytic solution is not available;
only a simulation model of the environment is given (the subject of simulation-based optimization);
the only way to collect information about the environment is to interact with it.the first two of these problems could be considered planning problems (since some form of model is available), while the last one could be considered to be a genuine learning problem. however, reinforcement learning converts both planning problems to machine learning problems.

exploration
the exploration vs. exploitation trade-off has been most thoroughly studied through the multi-armed bandit problem and for finite state space markov decision processes in burnetas and katehakis (1997).reinforcement learning requires clever exploration mechanisms; randomly selecting actions, without reference to an estimated probability distribution, shows poor performance. the case of (small) finite markov decision processes is relatively well understood. however, due to the lack of algorithms that scale well with the number of states (or scale to problems with infinite state spaces), simple exploration methods are the most practical.
one such method is 
  
    
      
        ε
      
    
    {\displaystyle \varepsilon }
  -greedy, where 
  
    
      
        0
        <
        ε
        <
        1
      
    
    {\displaystyle 0<\varepsilon <1}
   is a parameter controlling the amount of exploration vs. exploitation.  with probability 
  
    
      
        1
        −
        ε
      
    
    {\displaystyle 1-\varepsilon }
  , exploitation is chosen, and the agent chooses the action that it believes has the best long-term effect (ties between actions are broken uniformly at random). alternatively, with probability 
  
    
      
        ε
      
    
    {\displaystyle \varepsilon }
  , exploration is chosen, and the action is chosen uniformly at random. 
  
    
      
        ε
      
    
    {\displaystyle \varepsilon }
   is usually a fixed parameter but can be adjusted either according to a schedule (making the agent explore progressively less), or adaptively based on heuristics.

algorithms for control learning
even if the issue of exploration is disregarded and even if the state was observable (assumed hereafter), the problem remains to use past experience to find out which actions lead to higher cumulative rewards.

criterion of optimality
policy
the agent's action selection is modeled as a map called policy:

  
    
      
        π
        :
        a
        ×
        s
        →
        [
        0
        ,
        1
        ]
      
    
    {\displaystyle \pi :a\times s\rightarrow [0,1]}
  

  
    
      
        π
        (
        a
        ,
        s
        )
        =
        pr
        (
        
          a
          
            t
          
        
        =
        a
        ∣
        
          s
          
            t
          
        
        =
        s
        )
      
    
    {\displaystyle \pi (a,s)=\pr(a_{t}=a\mid s_{t}=s)}
  the policy map gives the probability of taking action 
  
    
      
        a
      
    
    {\displaystyle a}
   when in state 
  
    
      
        s
      
    
    {\displaystyle s}
  .: 61  there are also deterministic policies.

state-value function
the value function 
  
    
      
        
          v
          
            π
          
        
        (
        s
        )
      
    
    {\displaystyle v_{\pi }(s)}
   is defined as, expected return starting with state 
  
    
      
        s
      
    
    {\displaystyle s}
  , i.e. 
  
    
      
        
          s
          
            0
          
        
        =
        s
      
    
    {\displaystyle s_{0}=s}
  , and successively following policy 
  
    
      
        π
      
    
    {\displaystyle \pi }
  . hence, roughly speaking, the value function estimates "how good" it is to be in a given state.: 60 

  
    
      
        
          v
          
            π
          
        
        (
        s
        )
        =
        e
        ⁡
        [
        r
        ∣
        
          s
          
            0
          
        
        =
        s
        ]
        =
        e
        ⁡
        
          [
          
            
              ∑
              
                t
                =
                0
              
              
                ∞
              
            
            
              γ
              
                t
              
            
            
              r
              
                t
              
            
            ∣
            
              s
              
                0
              
            
            =
            s
          
          ]
        
        ,
      
    
    {\displaystyle v_{\pi }(s)=\operatorname {e} [r\mid s_{0}=s]=\operatorname {e} \left[\sum _{t=0}^{\infty }\gamma ^{t}r_{t}\mid s_{0}=s\right],}
  where the random variable 
  
    
      
        r
      
    
    {\displaystyle r}
   denotes the return, and is defined as the sum of future discounted rewards:

  
    
      
        r
        =
        
          ∑
          
            t
            =
            0
          
          
            ∞
          
        
        
          γ
          
            t
          
        
        
          r
          
            t
          
        
        ,
      
    
    {\displaystyle r=\sum _{t=0}^{\infty }\gamma ^{t}r_{t},}
  where 
  
    
      
        
          r
          
            t
          
        
      
    
    {\displaystyle r_{t}}
   is the reward at step 
  
    
      
        t
      
    
    {\displaystyle t}
  , 
  
    
      
        γ
        ∈
        [
        0
        ,
        1
        )
      
    
    {\displaystyle \gamma \in [0,1)}
   is the discount-rate. gamma is less than 1, so events in the distant future are weighted less than events in the immediate future.
the algorithm must find a policy with maximum expected return. from the theory of markov decision processes it is known that, without loss of generality, the search can be restricted to the set of so-called stationary policies. a policy is stationary if the action-distribution returned by it depends only on the last state visited (from the observation agent's history). the search can be further restricted to deterministic stationary policies. a deterministic stationary policy deterministically selects actions based on the current state. since any such policy can be identified with a mapping from the set of states to the set of actions, these policies can be identified with such mappings with no loss of generality.

brute force
the brute force approach entails two steps:

for each possible policy, sample returns while following it
choose the policy with the largest expected returnone problem with this is that the number of policies can be large, or even infinite. another is that the variance of the returns may be large, which requires many samples to accurately estimate the return of each policy.
these problems can be ameliorated if we assume some structure and allow samples generated from one policy to influence the estimates made for others. the two main approaches for achieving this are value function estimation and direct policy search.

value function
value function approaches attempt to find a policy that maximizes the return by maintaining a set of estimates of expected returns for some policy (usually either the "current" [on-policy] or the optimal [off-policy] one).
these methods rely on the theory of markov decision processes, where optimality is defined in a sense that is stronger than the above one: a policy is called optimal if it achieves the best-expected return from any initial state (i.e., initial distributions play no role in this definition). again, an optimal policy can always be found amongst stationary policies.
to define optimality in a formal manner, define the value of a policy 
  
    
      
        π
      
    
    {\displaystyle \pi }
   by

  
    
      
        
          v
          
            π
          
        
        (
        s
        )
        =
        e
        [
        r
        ∣
        s
        ,
        π
        ]
        ,
      
    
    {\displaystyle v^{\pi }(s)=e[r\mid s,\pi ],}
  where 
  
    
      
        r
      
    
    {\displaystyle r}
   stands for the return associated with following 
  
    
      
        π
      
    
    {\displaystyle \pi }
   from the initial state 
  
    
      
        s
      
    
    {\displaystyle s}
  . defining 
  
    
      
        
          v
          
            ∗
          
        
        (
        s
        )
      
    
    {\displaystyle v^{*}(s)}
   as the maximum possible value of 
  
    
      
        
          v
          
            π
          
        
        (
        s
        )
      
    
    {\displaystyle v^{\pi }(s)}
  , where 
  
    
      
        π
      
    
    {\displaystyle \pi }
   is allowed to change,

  
    
      
        
          v
          
            ∗
          
        
        (
        s
        )
        =
        
          max
          
            π
          
        
        
          v
          
            π
          
        
        (
        s
        )
        .
      
    
    {\displaystyle v^{*}(s)=\max _{\pi }v^{\pi }(s).}
  a policy that achieves these optimal values in each state is called optimal. clearly, a policy that is optimal in this strong sense is also optimal in the sense that it maximizes the expected return 
  
    
      
        
          ρ
          
            π
          
        
      
    
    {\displaystyle \rho ^{\pi }}
  , since 
  
    
      
        
          ρ
          
            π
          
        
        =
        e
        [
        
          v
          
            π
          
        
        (
        s
        )
        ]
      
    
    {\displaystyle \rho ^{\pi }=e[v^{\pi }(s)]}
  , where 
  
    
      
        s
      
    
    {\displaystyle s}
   is a state randomly sampled from the distribution 
  
    
      
        μ
      
    
    {\displaystyle \mu }
   of initial states (so 
  
    
      
        μ
        (
        s
        )
        =
        pr
        (
        
          s
          
            0
          
        
        =
        s
        )
      
    
    {\displaystyle \mu (s)=\pr(s_{0}=s)}
  ).
although state-values suffice to define optimality, it is useful to define action-values. given a state 
  
    
      
        s
      
    
    {\displaystyle s}
  , an action 
  
    
      
        a
      
    
    {\displaystyle a}
   and a policy 
  
    
      
        π
      
    
    {\displaystyle \pi }
  , the action-value of the pair 
  
    
      
        (
        s
        ,
        a
        )
      
    
    {\displaystyle (s,a)}
   under 
  
    
      
        π
      
    
    {\displaystyle \pi }
   is defined by

  
    
      
        
          q
          
            π
          
        
        (
        s
        ,
        a
        )
        =
        e
        ⁡
        [
        r
        ∣
        s
        ,
        a
        ,
        π
        ]
        ,
        
      
    
    {\displaystyle q^{\pi }(s,a)=\operatorname {e} [r\mid s,a,\pi ],\,}
  where 
  
    
      
        r
      
    
    {\displaystyle r}
   now stands for the random return associated with first taking action 
  
    
      
        a
      
    
    {\displaystyle a}
   in state 
  
    
      
        s
      
    
    {\displaystyle s}
   and following 
  
    
      
        π
      
    
    {\displaystyle \pi }
  , thereafter.
the theory of markov decision processes states that if 
  
    
      
        
          π
          
            ∗
          
        
      
    
    {\displaystyle \pi ^{*}}
   is an optimal policy, we act optimally (take the optimal action) by choosing the action from 
  
    
      
        
          q
          
            
              π
              
                ∗
              
            
          
        
        (
        s
        ,
        ⋅
        )
      
    
    {\displaystyle q^{\pi ^{*}}(s,\cdot )}
   with the highest value at each state, 
  
    
      
        s
      
    
    {\displaystyle s}
  . the action-value function of such an optimal policy (
  
    
      
        
          q
          
            
              π
              
                ∗
              
            
          
        
      
    
    {\displaystyle q^{\pi ^{*}}}
  ) is called the optimal action-value function and is commonly denoted by 
  
    
      
        
          q
          
            ∗
          
        
      
    
    {\displaystyle q^{*}}
  . in summary, the knowledge of the optimal action-value function alone suffices to know how to act optimally.
assuming full knowledge of the markov decision process, the two basic approaches to compute the optimal action-value function are value iteration and policy iteration. both algorithms compute a sequence of functions 
  
    
      
        
          q
          
            k
          
        
      
    
    {\displaystyle q_{k}}
   (
  
    
      
        k
        =
        0
        ,
        1
        ,
        2
        ,
        …
      
    
    {\displaystyle k=0,1,2,\ldots }
  ) that converge to 
  
    
      
        
          q
          
            ∗
          
        
      
    
    {\displaystyle q^{*}}
  . computing these functions involves computing expectations over the whole state-space, which is impractical for all but the smallest (finite) markov decision processes. in reinforcement learning methods, expectations are approximated by averaging over samples and using function approximation techniques to cope with the need to represent value functions over large state-action spaces.

monte carlo methods
monte carlo methods can be used in an algorithm that mimics policy iteration. policy iteration consists of two steps: policy evaluation and policy improvement.
monte carlo is used in the policy evaluation step. in this step, given a stationary, deterministic policy 
  
    
      
        π
      
    
    {\displaystyle \pi }
  , the goal is to compute the function values 
  
    
      
        
          q
          
            π
          
        
        (
        s
        ,
        a
        )
      
    
    {\displaystyle q^{\pi }(s,a)}
   (or a good approximation to them) for all state-action pairs 
  
    
      
        (
        s
        ,
        a
        )
      
    
    {\displaystyle (s,a)}
  . assume (for simplicity) that the markov decision process is finite, that sufficient memory is available to accommodate the action-values and that the problem is episodic and after each episode a new one starts from some random initial state. then, the estimate of the value of a given state-action pair 
  
    
      
        (
        s
        ,
        a
        )
      
    
    {\displaystyle (s,a)}
   can be computed by averaging the sampled returns that originated from 
  
    
      
        (
        s
        ,
        a
        )
      
    
    {\displaystyle (s,a)}
   over time.  given sufficient time, this procedure can thus construct a precise estimate 
  
    
      
        q
      
    
    {\displaystyle q}
   of the action-value function 
  
    
      
        
          q
          
            π
          
        
      
    
    {\displaystyle q^{\pi }}
  . this finishes the description of the policy evaluation step.
in the policy improvement step, the next policy is obtained by computing a greedy policy with respect to 
  
    
      
        q
      
    
    {\displaystyle q}
  : given a state 
  
    
      
        s
      
    
    {\displaystyle s}
  , this new policy returns an action that maximizes 
  
    
      
        q
        (
        s
        ,
        ⋅
        )
      
    
    {\displaystyle q(s,\cdot )}
  . in practice lazy evaluation can defer the computation of the maximizing actions to when they are needed.
problems with this procedure include:
1. the procedure may spend too much time evaluating a suboptimal policy.
2. it uses samples inefficiently in that a long trajectory improves the estimate only of the single state-action pair that started the trajectory.
3. when the returns along the trajectories have high variance, convergence is slow.
4. it works in episodic problems only.
5. it works in small, finite markov decision processes only.

temporal difference methods
the first problem is corrected by allowing the procedure to change the policy (at some or all states) before the values settle. this too may be problematic as it might prevent convergence. most current algorithms do this, giving rise to the class of generalized policy iteration algorithms. many actor-critic methods belong to this category.
the second issue can be corrected by allowing trajectories to contribute to any state-action pair in them. this may also help to some extent with the third problem, although a better solution when returns have high variance is sutton's temporal difference (td) methods that are based on the recursive bellman equation. the computation in td methods can be incremental (when after each transition the memory is changed and the transition is thrown away), or batch (when the transitions are batched and the estimates are computed once based on the batch). batch methods, such as the least-squares temporal difference method, may use the information in the samples better, while incremental methods are the only choice when batch methods are infeasible due to their high computational or memory complexity. some methods try to combine the two approaches. methods based on temporal differences also overcome the fourth issue.
another problem specific to td comes from their reliance on the recursive bellman equation. most td methods have a so-called 
  
    
      
        λ
      
    
    {\displaystyle \lambda }
   parameter 
  
    
      
        (
        0
        ≤
        λ
        ≤
        1
        )
      
    
    {\displaystyle (0\leq \lambda \leq 1)}
   that can continuously interpolate between monte carlo methods that do not rely on the bellman equations and the basic td methods that rely entirely on the bellman equations. this can be effective in palliating this issue.

function approximation methods
in order to address the fifth issue, function approximation methods are used. linear function approximation starts with a mapping 
  
    
      
        ϕ
      
    
    {\displaystyle \phi }
   that assigns a finite-dimensional vector to each state-action pair. then, the action values of a state-action pair 
  
    
      
        (
        s
        ,
        a
        )
      
    
    {\displaystyle (s,a)}
   are obtained by linearly combining the components of 
  
    
      
        ϕ
        (
        s
        ,
        a
        )
      
    
    {\displaystyle \phi (s,a)}
   with some weights 
  
    
      
        θ
      
    
    {\displaystyle \theta }
  :

  
    
      
        q
        (
        s
        ,
        a
        )
        =
        
          ∑
          
            i
            =
            1
          
          
            d
          
        
        
          θ
          
            i
          
        
        
          ϕ
          
            i
          
        
        (
        s
        ,
        a
        )
        .
      
    
    {\displaystyle q(s,a)=\sum _{i=1}^{d}\theta _{i}\phi _{i}(s,a).}
  the algorithms then adjust the weights, instead of adjusting the values associated with the individual state-action pairs. methods based on ideas from nonparametric statistics (which can be seen to construct their own features) have been explored.
value iteration can also be used as a starting point, giving rise to the q-learning algorithm and its many variants. including deep q-learning methods when a neural network is used to represent q, with various applications in stochastic search problems.the problem with using action-values is that they may need highly precise estimates of the competing action values that can be hard to obtain when the returns are noisy, though this problem is mitigated to some extent by temporal difference methods. using the so-called compatible function approximation method compromises generality and efficiency.

direct policy search
an alternative method is to search directly in (some subset of) the policy space, in which case the problem becomes a case of stochastic optimization. the two approaches available are gradient-based and gradient-free methods.
gradient-based methods (policy gradient methods) start with a mapping from a finite-dimensional (parameter) space to the space of policies: given the parameter vector 
  
    
      
        θ
      
    
    {\displaystyle \theta }
  , let 
  
    
      
        
          π
          
            θ
          
        
      
    
    {\displaystyle \pi _{\theta }}
   denote the policy associated to 
  
    
      
        θ
      
    
    {\displaystyle \theta }
  . defining the performance function by

  
    
      
        ρ
        (
        θ
        )
        =
        
          ρ
          
            
              π
              
                θ
              
            
          
        
        ,
      
    
    {\displaystyle \rho (\theta )=\rho ^{\pi _{\theta }},}
  under mild conditions this function will be differentiable as a function of the parameter vector 
  
    
      
        θ
      
    
    {\displaystyle \theta }
  . if the gradient of 
  
    
      
        ρ
      
    
    {\displaystyle \rho }
   was known, one could use gradient ascent. since an analytic expression for the gradient is not available, only a noisy estimate is available. such an estimate can be constructed in many ways, giving rise to algorithms such as williams' reinforce method (which is known as the likelihood ratio method in the simulation-based optimization literature). policy search methods have been used in the robotics context. many policy search methods may get stuck in local optima (as they are based on local search).
a large class of methods avoids relying on gradient information. these include simulated annealing, cross-entropy search or methods of evolutionary computation. many gradient-free methods can achieve (in theory and in the limit) a global optimum.
policy search methods may converge slowly given noisy data. for example, this happens in episodic problems when the trajectories are long and the variance of the returns is large. value-function based methods that rely on temporal differences might help in this case. in recent years, actor–critic methods have been proposed and performed well on various problems.

model-based algorithms
finally, all of the above methods can be combined with algorithms that first learn a model of the markov decision process, the probability of each next state given an action taken from an existing state. for instance, the dyna algorithm learns a model from experience, and uses that to provide more modelled transitions for a value function, in addition to the real transitions.  such methods can sometimes be extended to use of non-parametric models, such as when the transitions are simply stored and 'replayed' to the learning algorithm.
model-based methods can be more computationally intensive than model-free approaches, and their utility can be limited by the extent to which the markov decision process can be learnt.there are other ways to use models than to update a value function. for instance, in model predictive control the model is used to update the behavior directly.

theory
both the asymptotic and finite-sample behaviors of most algorithms are well understood. algorithms with provably good online performance (addressing the exploration issue) are known.
efficient exploration of markov decision processes is given in  burnetas and katehakis (1997). finite-time performance bounds have also appeared for many algorithms, but these bounds are expected to be rather loose and thus more work is needed to better understand the relative advantages and limitations.
for incremental algorithms, asymptotic convergence issues have been settled. temporal-difference-based algorithms converge under a wider set of conditions than was previously possible (for example, when used with arbitrary, smooth function approximation).

research
research topics include:

actor-critic architecture
actor-critic-scenery architecture 
adaptive methods that work with fewer (or no) parameters under a large number of conditions
bug detection in software projects
continuous learning
combinations with logic-based frameworks
exploration in large markov decision processes
human feedback
interaction between implicit and explicit learning in skill acquisition
intrinsic motivation which differentiates information-seeking, curiosity-type behaviours from task-dependent goal-directed behaviours large-scale empirical evaluations
large (or continuous) action spaces
modular and hierarchical reinforcement learning
multiagent/distributed reinforcement learning is a topic of interest. applications are expanding.
occupant-centric control
optimization of computing resources
partial information (e.g., using predictive state representation)
reward function based on maximising novel information
sample-based planning (e.g., based on monte carlo tree search).
securities trading
transfer learning
td learning modeling dopamine-based learning in the brain. dopaminergic projections from the substantia nigra to the basal ganglia function are the prediction error.
value-function and policy search methods

comparison of key algorithms
associative reinforcement learning
associative reinforcement learning tasks combine facets of stochastic learning automata tasks and supervised learning pattern classification tasks. in associative reinforcement learning tasks, the learning system interacts in a closed loop with its environment.

deep reinforcement learning
this approach extends reinforcement learning by using a deep neural network and without explicitly designing the state space. the work on learning atari games by google deepmind increased attention to deep reinforcement learning or end-to-end reinforcement learning.

adversarial deep reinforcement learning
adversarial deep reinforcement learning is an active area of research in reinforcement learning focusing on vulnerabilities of learned policies. in this research area some studies initially showed that reinforcement learning policies are susceptible to imperceptible adversarial manipulations. while some methods have been proposed to overcome these susceptibilities, in the most recent studies it has been shown that these proposed solutions are far from providing an accurate representation of current vulnerabilities of deep reinforcement learning policies.

fuzzy reinforcement learning
by introducing fuzzy inference in reinforcement learning, approximating the state-action value function with fuzzy rules in continuous space becomes possible. the if - then form of fuzzy rules make this approach suitable for expressing the results in a form close to natural language. extending frl with fuzzy rule interpolation  allows the use of reduced size sparse fuzzy rule-bases to emphasize cardinal rules (most important state-action values).

inverse reinforcement learning
in inverse reinforcement learning (irl), no reward function is given. instead, the reward function is inferred given an observed behavior from an expert. the idea is to mimic observed behavior, which is often optimal or close to optimal.

safe reinforcement learning
safe reinforcement learning (srl) can be defined as the process of learning policies that maximize the expectation of the return in problems in which it is important to ensure reasonable system performance and/or respect safety constraints during the learning and/or deployment processes.

see also
references
sources
sutton, richard s.; barto, andrew g. (2018) [1998]. reinforcement learning: an introduction (2nd ed.). mit press. isbn 978-0-262-03924-6.
li, shengbo eben (2023). reinforcement learning for sequential decision and optimal control (1st ed.). springer verlag, singapore. isbn 978-9-811-97783-1.
bertsekas, dimitri p. (2023) [2019]. reinforcement learning and optimal control (1st ed.). athena scientific. isbn 978-1-886-52939-7.

further reading
annaswamy, anuradha m. (3 may 2023). "adaptive control and intersections with reinforcement learning". annual review of control, robotics, and autonomous systems. 6 (1): 65–93. doi:10.1146/annurev-control-062922-090153. issn 2573-5144. s2cid 255702873.
auer, peter; jaksch, thomas; ortner, ronald (2010). "near-optimal regret bounds for reinforcement learning". journal of machine learning research. 11: 1563–1600.
busoniu, lucian; babuska, robert; de schutter, bart; ernst, damien (2010). reinforcement learning and dynamic programming using function approximators. taylor & francis crc press. isbn 978-1-4398-2108-4.
françois-lavet, vincent; henderson, peter; islam, riashat; bellemare, marc g.; pineau, joelle (2018). "an introduction to deep reinforcement learning". foundations and trends in machine learning. 11 (3–4): 219–354. arxiv:1811.12560. bibcode:2018arxiv181112560f. doi:10.1561/2200000071. s2cid 54434537.
powell, warren (2011). approximate dynamic programming: solving the curses of dimensionality. wiley-interscience. archived from the original on 2016-07-31. retrieved 2010-09-08.
sutton, richard s. (1988). "learning to predict by the method of temporal differences". machine learning. 3: 9–44. doi:10.1007/bf00115009.
szita, istvan; szepesvari, csaba (2010). "model-based reinforcement learning with nearly tight exploration complexity bounds" (pdf). icml 2010. omnipress. pp. 1031–1038. archived from the original (pdf) on 2010-07-14.

external links
reinforcement learning repository
reinforcement learning and artificial intelligence (rlai, rich sutton's lab at the university of alberta)
autonomous learning laboratory (all, andrew barto's lab at the university of massachusetts amherst)
real-world reinforcement learning experiments archived 2018-10-08 at the wayback machine at delft university of technology
stanford university andrew ng lecture on reinforcement learning
dissecting reinforcement learning series of blog post on reinforcement learning with python code
a (long) peek into reinforcement learning