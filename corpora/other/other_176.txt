a behavior tree is a mathematical model of plan execution used in computer science, robotics, control systems and video games. they describe switchings between a finite set of tasks in a modular fashion. their strength comes from their ability to create very complex tasks composed of simple tasks, without worrying how the simple tasks are implemented. behavior trees present some similarities to hierarchical state machines with the key difference that the main building block of a behavior is a task rather than a state. its ease of human understanding make behavior trees less error prone and very popular in the game developer community. behavior trees have been shown to generalize several other control architectures.

background
a behavior based control structure has been initially proposed by rodney brooks in his paper titled 'a robust layered control system for a mobile robot'. in the initial proposal a list of behaviors could work as alternative one another, later the approach has been extended and generalized in a tree-like organization of behaviors, with extensive application in the game industry as a powerful tool to model the behavior of non-player characters (npcs).
they have been extensively used in high-profile video games such as halo, bioshock, and spore. recent works propose behavior trees as a multi-mission control framework for uav, complex robots, robotic manipulation, and multi-robot systems.
behavior trees have now reached the maturity to be treated in game ai textbooks, as well as generic game environments such as unity (game engine) and unreal engine (see links below).
behavior trees became popular for their development paradigm: being able to create a complex behavior by only programming the npc's actions and then designing a tree structure (usually through drag and drop) whose leaf nodes are actions and whose inner nodes determine the npc's decision making. behavior trees are visually intuitive and easy to design, test, and debug, and provide more modularity, scalability, and reusability than other behavior creation methods.
over the years, the diverse implementations of behavior trees kept improving both in efficiency and capabilities to satisfy the demands of the industry, until they evolved into event-driven behavior trees. event-driven behavior trees solved some scalability issues of classical behavior trees by changing how the tree internally handles its execution, and by introducing a new type of node that can react to events and abort running nodes. nowadays, the concept of event-driven behavior tree is a standard and used in most of the implementations, even though they are still called "behavior trees" for simplicity.

key concepts
a behavior tree is graphically represented as a directed tree in which the nodes are classified as root, control flow nodes, or execution nodes (tasks). for each pair of connected nodes the outgoing node is called parent and the incoming node is called child. the root has no parents and exactly one child, the control flow nodes have one parent and at least one child, and the execution nodes have one parent and no children. graphically, the children of a control flow node are placed below it, ordered from left to right.the execution of a behavior tree starts from the root which sends ticks with a certain frequency to its child. a tick is an enabling signal that allows the execution of a child. when the execution of a node in the behavior tree is allowed, it returns to the parent a status running if its execution has not finished yet, success if it has achieved its goal, or failure otherwise.

control flow node
a control flow node is used to control the subtasks of which it is composed. a control flow node may be either a selector (fallback) node or a sequence node. they run each of their subtasks in turn. when a subtask is completed and returns its status (success or failure), the control flow node decides whether to execute the next subtask or not.

selector (fallback) node
fallback nodes are used to find and execute the first child that does not fail. a fallback node will return with a status code of success or running immediately when one of its children returns success or running (see figure i and the pseudocode below). the children are ticked in order of importance, from left to right.
in pseudocode, the algorithm for a fallback composition is:

1 for i from 1 to n do
2     childstatus ← tick(child(i))
3     if childstatus = running
4         return running
5     else if childstatus = success
6         return success
7 end
8 return failure

sequence node
sequence nodes are used to find and execute the first child that has not yet succeeded. a sequence node will return with a status code of failure or running immediately when one of its children returns failure or running (see figure ii and the pseudocode below). the children are ticked in order, from left to right.
in pseudocode, the algorithm for a sequence composition is:

1 for i from 1 to n do
2     childstatus ← tick(child(i))
3     if childstatus = running
4         return running
5     else if childstatus = failure
6         return failure
7 end
8 return success

mathematical state space definition
in order to apply control theory tools to the analysis of behavior trees, they can be defined as three-tuple.
  
    
      
        
          t
          
            i
          
        
        =
        {
        
          f
          
            i
          
        
        ,
        
          r
          
            i
          
        
        ,
        δ
        t
        }
        ,
      
    
    {\displaystyle t_{i}=\{f_{i},r_{i},\delta t\},}
  
where 
  
    
      
        i
        ∈
        
          n
        
      
    
    {\displaystyle i\in \mathbb {n} }
   is the index of the tree, 
  
    
      
        
          f
          
            i
          
        
        :
        
          
            r
          
          
            n
          
        
        →
        
          
            r
          
          
            n
          
        
      
    
    {\displaystyle f_{i}:\mathbb {r} ^{n}\rightarrow \mathbb {r} ^{n}}
   is a vector field representing the right hand side of an ordinary difference equation, 
  
    
      
        δ
        t
      
    
    {\displaystyle \delta t}
   is a time step and 

  
    
      
        
          r
          
            i
          
        
        :
        
          
            r
          
          
            n
          
        
        →
        {
        
          r
          
            i
          
        
        ,
        
          s
          
            i
          
        
        ,
        
          f
          
            i
          
        
        }
      
    
    {\displaystyle r_{i}:\mathbb {r} ^{n}\rightarrow \{r_{i},s_{i},f_{i}\}}
   is the return status, that can be equal to either 
running 
  
    
      
        
          r
          
            i
          
        
      
    
    {\displaystyle r_{i}}
  ,
success 
  
    
      
        
          s
          
            i
          
        
      
    
    {\displaystyle s_{i}}
  , or
failure 
  
    
      
        
          f
          
            i
          
        
      
    
    {\displaystyle f_{i}}
  .
note: a task is a degenerate behavior tree with no parent and no child.

behavior tree execution
the execution of a behavior tree is described by the following standard ordinary difference equations:

  
    
      
        
          x
          
            k
            +
            1
          
        
        (
        
          t
          
            k
            +
            1
          
        
        )
        =
        
          f
          
            i
          
        
        (
        
          x
          
            k
          
        
        (
        
          t
          
            k
          
        
        )
        )
      
    
    {\displaystyle x_{k+1}(t_{k+1})=f_{i}(x_{k}(t_{k}))}
  

  
    
      
        
          t
          
            k
            +
            1
          
        
        =
        
          t
          
            k
          
        
        +
        δ
        t
      
    
    {\displaystyle t_{k+1}=t_{k}+\delta t}
  
where 
  
    
      
        k
        ∈
        
          n
        
      
    
    {\displaystyle k\in \mathbb {n} }
   represent the discrete time, and  
  
    
      
        x
        ∈
        
          
            r
          
          
            n
          
        
      
    
    {\displaystyle x\in \mathbb {r} ^{n}}
   is the state space of the system modelled by the behavior tree.

sequence composition
two behavior trees 
  
    
      
        
          t
          
            i
          
        
      
    
    {\displaystyle t_{i}}
   and 
  
    
      
        
          t
          
            j
          
        
      
    
    {\displaystyle t_{j}}
   can be composed into a more complex behavior tree 
  
    
      
        
          t
          
            0
          
        
      
    
    {\displaystyle t_{0}}
   using a sequence operator.

  
    
      
        
          t
          
            0
          
        
        =
        
          
            sequence
          
        
        (
        
          t
          
            i
          
        
        ,
        
          t
          
            j
          
        
        )
        .
      
    
    {\displaystyle t_{0}={\mbox{sequence}}(t_{i},t_{j}).}
  
then return status 
  
    
      
        
          r
          
            0
          
        
      
    
    {\displaystyle r_{0}}
   and the vector field 
  
    
      
        
          f
          
            0
          
        
      
    
    {\displaystyle f_{0}}
   associated with 
  
    
      
        
          t
          
            0
          
        
      
    
    {\displaystyle t_{0}}
   are defined (for 
  
    
      
        
          
            
              s
            
          
          
            1
          
        
      
    
    {\displaystyle {\mathcal {s}}_{1}}
  ) as follows:

  
    
      
        
          r
          
            0
          
        
        (
        
          x
          
            k
          
        
        )
        =
        
          
            {
            
              
                
                  
                    r
                    
                      j
                    
                  
                  (
                  
                    x
                    
                      k
                    
                  
                  )
                
                
                  
                     if 
                  
                  
                    x
                    
                      k
                    
                  
                  ∈
                  
                    
                      
                        s
                      
                    
                    
                      1
                    
                  
                
              
              
                
                  
                    r
                    
                      i
                    
                  
                  (
                  
                    x
                    
                      k
                    
                  
                  )
                
                
                  
                     otherwise 
                  
                  .
                
              
            
            
          
        
      
    
    {\displaystyle r_{0}(x_{k})={\begin{cases}r_{j}(x_{k})&{\text{ if }}x_{k}\in {\mathcal {s}}_{1}\\r_{i}(x_{k})&{\text{ otherwise }}.\end{cases}}}
  

  
    
      
        
          f
          
            0
          
        
        (
        
          x
          
            k
          
        
        )
        =
        
          
            {
            
              
                
                  
                    f
                    
                      j
                    
                  
                  (
                  
                    x
                    
                      k
                    
                  
                  )
                
                
                  
                     if 
                  
                  
                    x
                    
                      k
                    
                  
                  ∈
                  
                    
                      
                        s
                      
                    
                    
                      1
                    
                  
                
              
              
                
                  
                    f
                    
                      i
                    
                  
                  (
                  
                    x
                    
                      k
                    
                  
                  )
                
                
                  
                     otherwise 
                  
                  .
                
              
            
            
          
        
      
    
    {\displaystyle f_{0}(x_{k})={\begin{cases}f_{j}(x_{k})&{\text{ if }}x_{k}\in {\mathcal {s}}_{1}\\f_{i}(x_{k})&{\text{ otherwise }}.\end{cases}}}

see also
decision tree
hybrid system
subsumption architecture

references
external links
ros behavior tree library
unreal engine 4 behavior tree documentation
behavior trees for ai: how they work
behavior trees: simple yet powerful ai for your robot archived 2020-02-25 at the wayback machine
video lectures on behavior trees